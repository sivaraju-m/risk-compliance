name: Risk Compliance CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 6:00 AM IST (00:30 UTC)
    - cron: '30 0 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      continue-on-error: true
      run: |
        mypy src/ --ignore-missing-imports
    
    - name: Test configuration loading
      run: |
        python -c "from risk_compliance.utils.config_loader import ConfigLoader; c = ConfigLoader(); print('‚úÖ Config loading OK')"
    
    - name: Test risk calculator
      run: |
        python -c "
        from risk_compliance import RiskCalculator
        import pandas as pd
        import numpy as np
        
        calc = RiskCalculator()
        positions = {'TEST': 100000}
        returns = pd.Series(np.random.normal(0, 0.02, 100))
        returns_data = {'TEST': returns}
        result = calc.calculate_portfolio_risk(positions, returns_data)
        assert 'var_95' in result
        print('‚úÖ Risk calculator OK')
        "
    
    - name: Test compliance checker
      run: |
        python -c "
        from risk_compliance import ComplianceChecker
        
        checker = ComplianceChecker()
        trade = {'symbol': 'TEST', 'quantity': 1000}
        positions = {'TEST': 50000}
        violations = checker.check_trade_compliance(trade, positions)
        print('‚úÖ Compliance checker OK')
        "
    
    - name: Test risk monitor CLI
      run: |
        python bin/risk_monitor.py --help
        python bin/risk_monitor.py --test
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --tb=short
      continue-on-error: true
    
    - name: Generate test report
      run: |
        python bin/risk_monitor.py --report || echo "Report generation test completed"

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Test expanded universe loading
      run: |
        python -c "
        from risk_compliance.utils.config_loader import ConfigLoader
        config = ConfigLoader()
        universe = config.load_expanded_universe()
        nifty_50 = universe.get('universe', {}).get('nifty_50', [])
        assert len(nifty_50) > 40, f'Expected 50+ Nifty stocks, got {len(nifty_50)}'
        print(f'‚úÖ Expanded universe loaded: {len(nifty_50)} Nifty 50 stocks')
        "
    
    - name: Test configuration validation
      run: |
        python -c "
        from risk_compliance.utils.config_loader import ConfigLoader
        config = ConfigLoader()
        
        # Test risk config
        risk_config = config.load_risk_config()
        assert 'risk_limits' in risk_config
        print('‚úÖ Risk config valid')
        
        # Test compliance config
        compliance_config = config.load_compliance_config()
        assert 'compliance_rules' in compliance_config
        print('‚úÖ Compliance config valid')
        "
    
    - name: Test risk monitoring simulation
      run: |
        python -c "
        import asyncio
        from risk_compliance import RiskCalculator, RealTimeRiskMonitor
        import pandas as pd
        import numpy as np
        
        async def test_monitoring():
            # Create test data
            positions = {
                'RELIANCE': 500000,
                'TCS': 300000,
                'INFY': 200000
            }
            
            # Generate sample returns
            returns_data = {}
            dates = pd.date_range('2023-01-01', periods=252, freq='D')
            for symbol in positions:
                np.random.seed(hash(symbol) % 1000)
                returns = np.random.normal(0.001, 0.02, 252)
                returns_data[symbol] = pd.Series(returns, index=dates)
            
            # Test risk calculation
            calc = RiskCalculator()
            risk_metrics = calc.calculate_portfolio_risk(positions, returns_data)
            assert 'var_95' in risk_metrics
            
            # Test risk monitoring
            monitor = RealTimeRiskMonitor()
            alerts = monitor.check_portfolio_risk(positions, returns_data)
            
            print(f'‚úÖ Integration test passed: {len(risk_metrics)} metrics, {len(alerts)} alerts')
        
        asyncio.run(test_monitoring())
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: Security scan with Safety
      run: |
        safety check --json || echo "Security scan completed with warnings"
    
    - name: Security scan with Bandit
      run: |
        bandit -r src/ -f json || echo "Bandit scan completed with warnings"

  daily-monitoring:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Run daily risk monitoring check
      run: |
        echo "üåÖ Daily Risk Compliance Check - $(date)"
        python bin/risk_monitor.py --test --debug
    
    - name: Generate daily report
      run: |
        python bin/risk_monitor.py --report
        echo "üìä Daily report generated"
    
    - name: Check system health
      run: |
        python -c "
        from risk_compliance.utils.config_loader import ConfigLoader
        from risk_compliance import RiskCalculator, RealTimeRiskMonitor, ComplianceChecker
        
        # Health checks
        config = ConfigLoader()
        risk_config = config.load_risk_config()
        compliance_config = config.load_compliance_config()
        universe = config.load_expanded_universe()
        
        calc = RiskCalculator()
        monitor = RealTimeRiskMonitor()
        checker = ComplianceChecker()
        
        # System status
        print('üè• SYSTEM HEALTH CHECK')
        print(f'   Config files: ‚úÖ')
        print(f'   Risk calculator: ‚úÖ')
        print(f'   Risk monitor: ‚úÖ')
        print(f'   Compliance checker: ‚úÖ')
        print(f'   Universe size: {len(universe.get(\"universe\", {}).get(\"nifty_50\", []))} stocks')
        print(f'   Risk limits: {len(risk_config.get(\"risk_limits\", {}))}')
        print(f'   Compliance rules: {len(compliance_config.get(\"compliance_rules\", {}))}')
        print('‚úÖ All systems operational')
        "

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t risk-compliance:latest .
        echo "üê≥ Docker image built successfully"
    
    - name: Test Docker container
      run: |
        docker run --rm risk-compliance:latest python bin/risk_monitor.py --help
        echo "üê≥ Docker container test passed"

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install memory-profiler
    
    - name: Performance benchmark
      run: |
        python -c "
        import time
        import pandas as pd
        import numpy as np
        from risk_compliance import RiskCalculator
        
        # Large portfolio test
        calc = RiskCalculator()
        
        # Create large portfolio (100 stocks)
        symbols = [f'STOCK_{i:03d}' for i in range(100)]
        positions = {symbol: np.random.uniform(10000, 1000000) for symbol in symbols}
        
        # Generate returns data
        returns_data = {}
        dates = pd.date_range('2020-01-01', '2024-01-01', freq='D')
        
        start_time = time.time()
        for symbol in symbols:
            np.random.seed(hash(symbol) % 1000)
            returns = np.random.normal(0.001, 0.02, len(dates))
            returns_data[symbol] = pd.Series(returns, index=dates)
        
        data_time = time.time() - start_time
        
        # Calculate risk metrics
        start_time = time.time()
        risk_metrics = calc.calculate_portfolio_risk(positions, returns_data)
        calc_time = time.time() - start_time
        
        print(f'‚ö° PERFORMANCE BENCHMARK')
        print(f'   Portfolio size: {len(positions)} positions')
        print(f'   Data generation: {data_time:.2f}s')
        print(f'   Risk calculation: {calc_time:.2f}s')
        print(f'   Metrics calculated: {len(risk_metrics)}')
        
        # Performance thresholds
        assert calc_time < 10.0, f'Risk calculation too slow: {calc_time:.2f}s > 10s'
        assert len(risk_metrics) > 5, f'Too few metrics: {len(risk_metrics)}'
        
        print('‚úÖ Performance test passed')
        "

  notify:
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan]
    if: always()
    
    steps:
    - name: Notify status
      run: |
        echo "üìß Risk Compliance CI/CD Status:"
        echo "   Tests: ${{ needs.test.result }}"
        echo "   Integration: ${{ needs.integration-test.result }}"
        echo "   Security: ${{ needs.security-scan.result }}"
        
        if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.integration-test.result }}" = "success" ]; then
          echo "‚úÖ Risk Compliance system is healthy"
        else
          echo "‚ùå Risk Compliance system needs attention"
        fi
